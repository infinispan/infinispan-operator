language: go

sudo: required

services:
  - docker

cache:
  directories:
  - $GOPATH/pkg/dep

env:
  global:
    - VM_DRIVER=none
    - KUBE_VERSION=v1.15.0
    - MINIKUBE_VERSION=v1.2.0
    - CHANGE_MINIKUBE_NONE_USER=true

jobs:
  include:
    - stage: "Unit Test"
      name: "Unit Test"
      script:
        - go get -u github.com/golang/dep/cmd/dep
        - make unit-test
    - stage: "Test"
      name: "OpenShift"
      script:
        - go get -u github.com/golang/dep/cmd/dep
        - ci/start-okd-4.0.0.sh
        - make test KUBECONFIG=/tmp/openshift-dind-cluster/openshift/openshift.local.config/master/admin.kubeconfig
        - KUBECONFIG=/tmp/openshift-dind-cluster/openshift/openshift.local.config/master/admin.kubeconfig ./oc get pods --all-namespaces
        - KUBECONFIG=/tmp/openshift-dind-cluster/openshift/openshift.local.config/master/admin.kubeconfig ./oc get events --all-namespaces
        - docker ps -a
        - for log in $(docker ps -qa | xargs); do docker logs --tail 500 $log; done
    - stage: "Test"
      env:
        - WATCH_NAMESPACE=namespace-for-testing
        - APP_USER=APPLICATION_USER
        - APP_PASS=APPLICATION_PASSWORD
        - MGMT_USER=ADMIN_USER
        - MGMT_PASS=ADMIN_PASSWORD
        - 'ENTRY_POINT_ARGS="[]"'
        - 'PROBES="{\"readiness\": \"/opt/datagrid/bin/readinessProbe.sh\", \"liveness\": \"/opt/datagrid/bin/livenessProbe.sh\"}"'
        - 'ADDITIONAL_VARS="[\"IMAGE\",\"NUMBER_OF_INSTANCE\",\"HOTROD_AUTHENTICATION\"]"'
        - 'VOLUME_MOUNTS="[{\"MountPath\": \"/opt/datagrid/standalone/data\", \"Name": \"srv-data\"},{\"MountPath\": \"/var/run/secrets/java.io/keystores\", \"Name\": \"keystore-volume\"},{\"MountPath\": \"/var/run/secrets/openshift.io/serviceaccount\", \"Name\": \"service-certs\"}]"'
        - 'VOLUME_CLAIMS=[{\"metadata\": {\"Name\": \"srv-data\"}, \"Spec\":{\"AccessModes\": [\"ReadWriteOnce\"], \"Resources\": {\"Requests\": {\"storage\": \"1Gi\"}}}}]"'
        - 'IMAGE=registry.access.redhat.com/jboss-datagrid-7/datagrid73-openshift:latest'
        - CLI_CMD=/opt/datagrid/bin/cli.sh
        - 'DEFAULT_IMAGE=registry.access.redhat.com/jboss-datagrid-7/datagrid73-openshift:latest'
        - HOTROD_AUTHENTICATION=true
        - VOLUME_KEYSTORE_NAME=keystore-volume
        - VOLUME_SECRET_NAME=service-certs
        - TEST_MGMT_ENABLED=false
      name: "OpenShift Custom Image"
      script:
        - env
        - go get -u github.com/golang/dep/cmd/dep
        - ci/start-okd-4.0.0.sh
        - make test KUBECONFIG=/tmp/openshift-dind-cluster/openshift/openshift.local.config/master/admin.kubeconfig
        - KUBECONFIG=/tmp/openshift-dind-cluster/openshift/openshift.local.config/master/admin.kubeconfig ./oc get pods --all-namespaces
        - KUBECONFIG=/tmp/openshift-dind-cluster/openshift/openshift.local.config/master/admin.kubeconfig ./oc get events --all-namespaces
        - docker ps -a
        - for log in $(docker ps -qa | xargs); do docker logs --tail 500 $log; done
    - stage: "Test"
      env:
        - 'INFINISPAN_CPU=0.25'
        - INFINISPAN_MEMORY=384Mi
      name: "Minikube"
      dist: xenial
      script:
        - go get -u github.com/golang/dep/cmd/dep
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBE_VERSION}/bin/linux/amd64/kubectl
        - chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/${MINIKUBE_VERSION}/minikube-linux-amd64
        - chmod +x minikube && sudo mv minikube /usr/local/bin/
        - sudo minikube start --vm-driver=none --kubernetes-version=${KUBE_VERSION}
        - minikube update-context
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
        - make test KUBECONFIG=${HOME}/.kube/config
        - kubectl get events --all-namespaces
        - kubectl cluster-info
        - df -h
        - sudo minikube status
        - sudo minikube logs
        - docker ps -a
        - for log in $(docker ps -qa | xargs); do docker logs --tail 500 $log; done
        - sudo minikube stop
