<infinispan
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:infinispan:config:13.0 https://infinispan.org/schemas/infinispan-config-13.0.xsd
                        urn:infinispan:server:13.0 https://infinispan.org/schemas/infinispan-server-13.0.xsd
                        urn:infinispan:config:clustered-locks:13.0 https://infinispan.org/schemas/infinispan-clustered-locks-config-13.0.xsd
                        urn:org:jgroups http://www.jgroups.org/schema/jgroups-4.2.xsd
                        urn:infinispan:config:cloudevents:13.0 https://infinispan.org/schemas/infinispan-cloudevents-config-13.0.xsd"
    xmlns="urn:infinispan:config:13.0"
    xmlns:server="urn:infinispan:server:13.0"
    xmlns:locks="urn:infinispan:config:clustered-locks:13.0"
    xmlns:ce="urn:infinispan:config:cloudevents:13.0">

<jgroups>
    <stack name="image-tcp" extends="tcp">
        <TCP bind_addr="${jgroups.bind.address:SITE_LOCAL}"
             bind_port="${jgroups.bind.port,jgroups.tcp.port:{{ .JGroups.BindPort }}}"
             enable_diagnostics="{{ .JGroups.Diagnostics }}"
             port_range="0"
        />
        {{ if .JGroups.DNSPing.Query }}
        <dns.DNS_PING dns_address="{{ .JGroups.DNSPing.Address }}" dns_query="{{ .JGroups.DNSPing.Query }}"
                      dns_record_type="{{ .JGroups.DNSPing.RecordType }}"
                      stack.combine="REPLACE" stack.position="MPING"/>
        {{ else }}
        <MPING bind_addr="${jgroups.bind.address:SITE_LOCAL}"/>
        {{ end }}
        {{ if .JGroups.FastMerge }}
        <MERGE3 min_interval="1000" max_interval="3000" check_interval="5000" stack.combine="COMBINE"/>
        {{ end }}
    </stack>
    <stack name="image-udp" extends="udp">
        <UDP enable_diagnostics="{{ .JGroups.Diagnostics }}"
             port_range="0"
        />
        {{ if .JGroups.DNSPing.Query }}
        <dns.DNS_PING dns_address="{{ .JGroups.DNSPing.Address }}" dns_query="{{ .JGroups.DNSPing.Query }}"
                      dns_record_type="{{ .JGroups.DNSPing.RecordType }}"
                      stack.combine="REPLACE" stack.position="PING"/>
        {{ end }}
        {{ if .JGroups.FastMerge }}
        <MERGE3 min_interval="1000" max_interval="3000" check_interval="5000" stack.combine="COMBINE"/>
        {{ end }}
    </stack>
    {{ if .XSite }} {{ if .XSite.Backups }}
    <stack name="relay-tcp" extends="tcp">
        <!-- overwrite bind address and port -->
        <TCP
            bind_addr="${jgroups.relay.bind.address:SITE_LOCAL}"
            bind_port="${jgroups.relay.bind.port:{{.XSite.Relay.BindPort}} }"
            enable_diagnostics="{{.JGroups.Diagnostics}}"
            external_addr="{{.XSite.Address}}"
            external_port="{{.XSite.Port}}"
            port_range="0"
            stack.combine="COMBINE"
        />
        <TCPPING
            initial_hosts="{{.XSite.Address}}[{{.XSite.Port}}],{{RemoteSites .XSite.Backups}}"
	        port_range="0"
            stack.combine="REPLACE"
            stack.position="MPING"
        />
        <!-- we are unable to use FD_SOCK with openshift -->
        <!-- otherwise, we would need 1 external service per pod -->
        <FD_SOCK stack.combine="REMOVE"/>
        {{ if .JGroups.FastMerge }}
        <MERGE3 min_interval="1000" max_interval="3000" check_interval="5000" stack.combine="COMBINE"/>
        {{ end }}
    </stack>
    <stack name="relay-tunnel" extends="udp">
        <TUNNEL
            bind_addr="${jgroups.relay.bind.address:SITE_LOCAL}"
            bind_port="${jgroups.relay.bind.port:{{.XSite.Relay.BindPort}} }"
            gossip_router_hosts="{{.XSite.Address}}[{{.XSite.Port}}],{{RemoteSites .XSite.Backups}}"
            enable_diagnostics="{{ .JGroups.Diagnostics }}"
            {{ if .JGroups.FastMerge }} reconnect_interval="1000" {{ end }}
            port_range="0"
            stack.combine="REPLACE"
            stack.position="UDP"
        />
        <!-- we are unable to use FD_SOCK with openshift -->
        <!-- otherwise, we would need 1 external service per pod -->
        <FD_SOCK stack.combine="REMOVE"/>   
        {{ if .JGroups.FastMerge }}
        <MERGE3 min_interval="1000" max_interval="3000" check_interval="5000" stack.combine="COMBINE"/>
        {{ end }}     
    </stack>
    <stack name="xsite" extends="image-{{ .JGroups.Transport }}">
        <relay.RELAY2 xmlns="urn:org:jgroups" site="{{ .XSite.Name }}" max_site_masters="{{ .XSite.MaxRelayNodes }}"
                      can_become_site_master="{{ .XSite.RelayNodeCandidate }}"/>
        <remote-sites default-stack="relay-{{ .XSite.Transport }}">
            <remote-site name="{{ .XSite.Name }}"/>
            {{ range $it := .XSite.Backups }}
            <remote-site name="{{ $it.Name }}"/>
            {{ end }}
        </remote-sites>
    </stack>
    {{ end }} {{ end }}
</jgroups>
<cache-container name="default" statistics="true" zero-capacity-node="${infinispan.zero-capacity-node:false}">
    {{ if .Infinispan.Authorization.Enabled }}
    <security>
        <authorization>
            {{if eq .Infinispan.Authorization.RoleMapper "commonName" }}
            <common-name-role-mapper />
            {{ else }}
            <cluster-role-mapper />
            {{ end }}
            {{ if .Infinispan.Authorization.Roles }}
            {{ range $role :=  .Infinispan.Authorization.Roles }}
            <role name="{{ $role.Name }}" permissions="{{ ($role.Permissions | ListAsString) }}"/>
            {{ end }}
            {{ end }}
        </authorization>
    </security>
    {{ end }}
    <transport cluster="${infinispan.cluster.name:{{ .Infinispan.ClusterName }}}" node-name="${infinispan.node.name:}"
    {{if .XSite }}{{if .XSite.Backups }}stack="xsite"{{ else }} stack="image-{{ .JGroups.Transport }}"{{ end }}{{ else }} stack="image-{{ .JGroups.Transport }}"{{ end }}
    {{ if .Transport.TLS.Enabled }} server:security-realm="transport" {{ end }}
    />
    {{ if .CloudEvents }}
        <ce:cloudevents bootstrap-servers="{{ .CloudEvents.BootstrapServers }}" {{if .CloudEvents.Acks }} acks="{{ .CloudEvents.Acks }}" {{ end }} {{if .CloudEvents.CacheEntriesTopic }} cache-entries-topic="{{ .CloudEvents.CacheEntriesTopic }}" {{ end }}/>
    {{ end }}
    <locks:clustered-locks num-owners="{{ .Infinispan.Locks.Owners }}" reliability="{{ .Infinispan.Locks.Reliability | UpperCase }}"/>
</cache-container>
<server xmlns="urn:infinispan:server:13.0">
    <interfaces>
        <interface name="public">
            <inet-address value="${infinispan.bind.address}"/>
        </interface>
    </interfaces>
    <socket-bindings default-interface="public" port-offset="${infinispan.socket.binding.port-offset:0}">
        <socket-binding name="default" port="${infinispan.bind.port:11222}"/>
        {{ if .Endpoints.DedicatedAdmin }}
        <socket-binding name="admin" port="11223"/>
        {{ end }}
    </socket-bindings>
    <security>
        {{ if .Keystore.Password }}
        <credential-stores>
          <credential-store name="credentials" path="credentials.pfx">
            <clear-text-credential clear-text="secret"/>
          </credential-store>
        </credential-stores>
        {{ end }}
        <security-realms>
            <security-realm name="default">
                <server-identities>
				{{ if or .Keystore.Path .Truststore.Path}}
				<ssl>
                        {{ if .Keystore.Path }}
                            {{ if .Keystore.Password }}
                                <keystore path="{{  .Keystore.Path }}" {{if .Keystore.Alias }} alias="{{  .Keystore.Alias }}" {{ end }}
                                      {{ if  eq .Keystore.SelfSignCert "true" }}generate-self-signed-certificate-host="localhost"{{ end }}>
                                    <credential-reference store="credentials" alias="keystore"/>
                                </keystore>
                            {{ else }}
                                <keystore path="{{  .Keystore.Path }}" keystore-password="" {{if .Keystore.Alias }} alias="{{  .Keystore.Alias }}" {{ end }}
                                      {{ if  eq .Keystore.SelfSignCert "true" }}generate-self-signed-certificate-host="localhost"{{ end }}/>
                            {{ end }}
                        {{ end }}
                        {{ if  .Truststore.Path }}
                            <truststore path="{{ .Truststore.Path }}">
                                <credential-reference store="credentials" alias="truststore"/>
                            </truststore>
                        {{ end }}
                </ssl>
				{{ end }}
                </server-identities>
                {{if .Endpoints.Authenticate }}
                {{if eq (.Endpoints.ClientCert | LowerCase) "authenticate" }}
                <truststore-realm/>
                {{ else }}
                <properties-realm groups-attribute="Roles">
                    <user-properties path="cli-users.properties" relative-to="infinispan.server.config.path"/>
                    <group-properties path="cli-groups.properties" relative-to="infinispan.server.config.path"/>
                </properties-realm>
                {{ end }}
                {{ end }}
            </security-realm>
            {{if .Endpoints.DedicatedAdmin }}
            <security-realm name="admin">
                <properties-realm groups-attribute="Roles">
                    <user-properties path="cli-admin-users.properties" relative-to="infinispan.server.config.path"/>
                    <group-properties path="cli-admin-groups.properties" relative-to="infinispan.server.config.path"/>
                </properties-realm>
            </security-realm>
            {{ end }}
            {{ if .Transport.TLS.Enabled }}
            <security-realm name="transport">
                <server-identities>
                    <ssl>
                        {{ if .Transport.TLS.KeyStore.Path }}
                        <keystore path="{{ .Transport.TLS.KeyStore.Path }}"
                                    keystore-password="{{ .Transport.TLS.KeyStore.Password }}"
                                    alias="{{ .Transport.TLS.KeyStore.Alias }}" />
                        {{ end }}
                        {{ if .Transport.TLS.TrustStore.Path }}
                        <truststore path="{{ .Transport.TLS.TrustStore.Path }}"
                                    password="{{ .Transport.TLS.TrustStore.Password }}" />
                        {{ end }}
                    </ssl>
                </server-identities>
            </security-realm>
            {{ end }}
        </security-realms>
    </security>
    <endpoints>
        <endpoint socket-binding="default" security-realm="default" {{ if ne .Endpoints.ClientCert "none" }}require-ssl-client-auth="true"{{ end }}>
            {{ if .Endpoints.Hotrod.Enabled }}
            {{ if .Endpoints.Authenticate }}
            <hotrod-connector>
                <authentication>
                    <sasl qop="{{ .Endpoints.Hotrod.Qop }}" server-name="{{ .Endpoints.Hotrod.ServerName }}"/>
                </authentication>
            </hotrod-connector>
            {{ else }}
            <hotrod-connector />
            {{ end }}
            {{ end }}
            {{if .Endpoints.Enabled }}
                {{if .Endpoints.Cors }}
                <rest-connector>
                <cors-rules>
                    {{range $rule := .Endpoints.Cors }}
                    <cors-rule name="{{ $rule.Name }}" allow-credentials="{{ $rule.AllowCredentials or "false" }}"
                               max-age-seconds="{{ $rule.MaxAgeSeconds or 0 }}">
                        <!-- TODO: add rules $rule.AllowedOrigins.listElement('allowed-origins') or '' -->
                    </cors-rule>
                    {{ end }}
                </cors-rules>
                </rest-connector>
                {{ else }}
                <rest-connector />
                {{ end }}
            {{ end }}
        </endpoint>
        {{if .Endpoints.DedicatedAdmin }}
        <endpoint socket-binding="admin" security-realm="admin">
            <rest-connector>
                <authentication mechanisms="BASIC DIGEST"/>
            </rest-connector>
            <hotrod-connector />
        </endpoint>
        {{ end }}
    </endpoints>
</server>
</infinispan>

