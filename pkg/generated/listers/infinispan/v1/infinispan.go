/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/jboss-dockerfiles/infinispan-server-operator/pkg/apis/infinispan/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InfinispanLister helps list Infinispans.
type InfinispanLister interface {
	// List lists all Infinispans in the indexer.
	List(selector labels.Selector) (ret []*v1.Infinispan, err error)
	// Infinispans returns an object that can list and get Infinispans.
	Infinispans(namespace string) InfinispanNamespaceLister
	InfinispanListerExpansion
}

// infinispanLister implements the InfinispanLister interface.
type infinispanLister struct {
	indexer cache.Indexer
}

// NewInfinispanLister returns a new InfinispanLister.
func NewInfinispanLister(indexer cache.Indexer) InfinispanLister {
	return &infinispanLister{indexer: indexer}
}

// List lists all Infinispans in the indexer.
func (s *infinispanLister) List(selector labels.Selector) (ret []*v1.Infinispan, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Infinispan))
	})
	return ret, err
}

// Infinispans returns an object that can list and get Infinispans.
func (s *infinispanLister) Infinispans(namespace string) InfinispanNamespaceLister {
	return infinispanNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InfinispanNamespaceLister helps list and get Infinispans.
type InfinispanNamespaceLister interface {
	// List lists all Infinispans in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Infinispan, err error)
	// Get retrieves the Infinispan from the indexer for a given namespace and name.
	Get(name string) (*v1.Infinispan, error)
	InfinispanNamespaceListerExpansion
}

// infinispanNamespaceLister implements the InfinispanNamespaceLister
// interface.
type infinispanNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Infinispans in the indexer for a given namespace.
func (s infinispanNamespaceLister) List(selector labels.Selector) (ret []*v1.Infinispan, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Infinispan))
	})
	return ret, err
}

// Get retrieves the Infinispan from the indexer for a given namespace and name.
func (s infinispanNamespaceLister) Get(name string) (*v1.Infinispan, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("infinispan"), name)
	}
	return obj.(*v1.Infinispan), nil
}
