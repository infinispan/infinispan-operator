<infinispan
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:infinispan:config:14.0 https://infinispan.org/schemas/infinispan-config-14.0.xsd
                        urn:infinispan:server:14.0 https://infinispan.org/schemas/infinispan-server-14.0.xsd
                        urn:infinispan:config:cloudevents:14.0 https://infinispan.org/schemas/infinispan-cloudevents-config-14.0.xsd"
    xmlns="urn:infinispan:config:14.0"
    xmlns:server="urn:infinispan:server:14.0"
    xmlns:ce="urn:infinispan:config:cloudevents:14.0">

<cache-container name="default" statistics="true">
    {{ if .Infinispan.Authorization.Enabled }}
    <security>
        <authorization>
            {{if eq .Infinispan.Authorization.RoleMapper "commonName" }}
            <common-name-role-mapper />
            {{ else }}
            <cluster-role-mapper />
            {{ end }}
            {{ if .Infinispan.Authorization.Roles }}
            {{ range $role :=  .Infinispan.Authorization.Roles }}
            <role name="{{ $role.Name }}" permissions="{{ $role.Permissions }}"/>
            {{ end }}
            {{ end }}
        </authorization>
    </security>
    {{ end }}
    <transport cluster="${infinispan.cluster.name:{{ .ClusterName }}}" node-name="${infinispan.node.name:}"
    {{if .XSite }}{{if .XSite.Sites }}stack="xsite"{{ else }}stack="image-tcp"{{ end }}{{ else }}stack="image-tcp"{{ end }}
    {{ if .Transport.TLS.Enabled }}server:security-realm="transport"{{ end }}
    />
    {{ if .CloudEvents }}
        <ce:cloudevents bootstrap-servers="{{ .CloudEvents.BootstrapServers }}" {{if .CloudEvents.Acks }} acks="{{ .CloudEvents.Acks }}" {{ end }} {{if .CloudEvents.CacheEntriesTopic }} cache-entries-topic="{{ .CloudEvents.CacheEntriesTopic }}" {{ end }}/>
    {{ end }}
</cache-container>
<server xmlns="urn:infinispan:server:14.0">
    <socket-bindings default-interface="public" port-offset="${infinispan.socket.binding.port-offset:0}">
        <socket-binding name="default" port="${infinispan.bind.port:11222}"/>
    </socket-bindings>
    <security>
        {{ if or .Keystore.Password .Truststore.Path }}
        <credential-stores>
          <credential-store name="credentials" path="credentials.pfx">
            <clear-text-credential clear-text="secret"/>
          </credential-store>
        </credential-stores>
        {{ end }}
        <security-realms>
            <security-realm name="default">
                <server-identities>
				{{ if or .Keystore.Path .Truststore.Path}}
				<ssl>
                        {{ if .Keystore.Path }}
                            {{ if .Keystore.Password }}
                                <keystore path="{{  .Keystore.Path }}" {{if .Keystore.Alias }} alias="{{ .Keystore.Alias }}" {{ end }}>
                                    <credential-reference store="credentials" alias="keystore"/>
                                </keystore>
                            {{ else }}
                                <keystore path="{{  .Keystore.Path }}" keystore-password="" {{if .Keystore.Alias }} alias="{{ .Keystore.Alias }}" {{ end }}/>
                            {{ end }}
                        {{ end }}
                        {{ if  .Truststore.Path }}
                            <truststore path="{{ .Truststore.Path }}">
                                <credential-reference store="credentials" alias="truststore"/>
                            </truststore>
                        {{ end }}
                </ssl>
				{{ end }}
                </server-identities>
                {{if .Endpoints.Authenticate }}
                {{if eq .Endpoints.ClientCert "Authenticate" }}
                <truststore-realm/>
                {{ else }}
                <properties-realm groups-attribute="Roles">
                    <user-properties path="cli-users.properties" relative-to="infinispan.server.config.path"/>
                    <group-properties path="cli-groups.properties" relative-to="infinispan.server.config.path"/>
                </properties-realm>
                {{ end }}
                {{ end }}
            </security-realm>
            {{ if .Transport.TLS.Enabled }}
            <security-realm name="transport">
                <server-identities>
                    <ssl>
                        {{ if .Transport.TLS.KeyStore.Path }}
                        <keystore path="{{ .Transport.TLS.KeyStore.Path }}"
                                    keystore-password="{{ .Transport.TLS.KeyStore.Password }}"
                                    alias="{{ .Transport.TLS.KeyStore.Alias }}" />
                        {{ end }}
                        {{ if .Transport.TLS.TrustStore.Path }}
                        <truststore path="{{ .Transport.TLS.TrustStore.Path }}"
                                    password="{{ .Transport.TLS.TrustStore.Password }}" />
                        {{ end }}
                    </ssl>
                </server-identities>
            </security-realm>
            {{ end }}
        </security-realms>
    </security>
    <endpoints>
        <endpoint socket-binding="default" security-realm="default" {{ if ne .Endpoints.ClientCert "None" }}require-ssl-client-auth="true"{{ end }}>
            {{ if .Endpoints.Authenticate }}
            <hotrod-connector>
                <authentication>
                    <sasl qop="auth" server-name="infinispan"/>
                </authentication>
            </hotrod-connector>
            {{ else }}
            <hotrod-connector />
            {{ end }}
            <rest-connector />
        </endpoint>
    </endpoints>
</server>
</infinispan>
